#!/bin/bash

# Graphene build based on this guid:
#   https://github.com/sgx-naors/Iolite
sudo apt-get install -y \
    autoconf \
    automake \
    build-essential \
    docker.io \
    g++-4.8 \
    g++-5 \
    gcc-4.8 \
    gcc-5 \
    libcurl4-openssl-dev \
    libprotobuf-dev \
    libssl-dev \
    libtool \
    make \
    ocaml \
    protobuf-compiler \
    python \
    wget

# Clone and build kernel driver
if [[ ! -e linux-sgx-driver ]]; then
  git clone -b sgx_driver_1.9 https://github.com/intel/linux-sgx-driver.git
fi

if lsmod | grep sgx; then
  echo '[INFO] sgx driver already installed.  nothing to do'
else
  pushd linux-sgx-driver
  sudo git reset --hard
  sudo chown -R ${USER}: .
  make -j5 DEBUG=1
  SIGNING_KEY_PATH="/usr/src/linux-headers-$(uname -r)/certs"
  if [[ ! -e ${SIGNING_KEY_PATH}/signing_key.pem || ! -e ${SIGNING_KEY_PATH}/signing_key.x509 ]]; then
    sudo openssl req \
        -new \
        -x509 \
        -newkey rsa:4096 \
        -keyout ${SIGNING_KEY_PATH}/signing_key.pem \
        -nodes \
        -days 36500 \
        -subj "/CN=VirtruSGXTest/" \
        -out ${SIGNING_KEY_PATH}/signing_key.x509
  fi
  sudo make install
  sudo ln -sf /lib/modules/$(uname -r)/kernel/drivers/intel/sgx/isgx.ko /lib/modules/$(uname -r)
  sudo /sbin/depmod -a
  sudo /sbin/modprobe isgx
  popd
fi

# Clone Iolite repo, install old iclsclient and generate key
if [[ ! -e Iolite ]]; then
  git clone --recursive https://github.com/tdewitt/Iolite.git
fi
pushd Iolite
sudo git reset --hard
sudo chown -R ${USER}: .
sudo apt-get install ./iclsclient_1.45.449.12-2_amd64.deb
if [[ -e /opt/intel/sgxkey/enclave-key.pem ]]; then
  echo '[INFO] enclave key already exists.  nothing to do'
else
  sudo mkdir -p /opt/intel/sgxkey
  sudo openssl genrsa -3 -out /opt/intel/sgxkey/enclave-key.pem 3072
fi
popd

# Clone and build SDK and PSW
if [[ -e /opt/intel/sgxsdk && -e /opt/intel/sgxpsw ]]; then
  echo '[INFO] SDK and PSW already installed.  nothing to do'
else
  cp Iolite/sgx_sdk_psw.patch linux-sgx
  pushd linux-sgx
  ./download_prebuilt.sh
  git apply sgx_sdk_psw.patch --stat
  make -j5 DEBUG=1

  # build and install sdk
  if [[ -e /opt/intel/sgxsdk ]]; then
    echo '[INFO] /opt/intel/sgxsdk already exists.  remove to rebuild sdk package psw package'
  else
    make -j5 sdk_install_pkg DEBUG=1
    sudo ./linux/installer/bin/sgx_linux_x64_sdk_1.9.100.39124.bin --prefix /opt/intel
    sudo sh -c "echo 'export SGX_ENCLAVE_KEY=/opt/intel/sgxkey/enclave-key.pem' >> /opt/intel/sgxsdk/environment"
    sudo cp -f /opt/intel/sgxsdk/environment /etc/profile.d/intel-sgx.sh
  fi

  # build and install psw
  if [[ -e /opt/intel/sgxpsw ]]; then
    echo '[INFO] /opt/intel/sgxpsw already exists.  remove to rebuild psw package'
  else
    make -j5 psw_install_pkg DEBUG=1
    sudo ./linux/installer/bin/sgx_linux_x64_psw_1.9.100.39124.bin
  fi

  chown ${USER}: /opt/intel -R
  popd
fi

# this needs to be done
source /opt/intel/sgxsdk/environment

# Clone Graphene-SGX
if [[ ! -e graphene ]]; then
  git clone --recursive https://github.com/tdewitt/graphene.git
fi
pushd graphene
sudo git reset --hard
sudo chown -R ${USER}: .
git submodule update --init

# compile graphene-sgx driver
if lsmod | grep graphene_sgx; then
  echo '[INFO] graphene-sgx driver already installed.  nothing to do'
else
  pushd Pal/src/host/Linux-SGX/sgx-driver
  sudo make -j5 DEBUG=1 ISGX_DRIVER_PATH=../../../../../../linux-sgx-driver ISGX_DRIVER_VERSION=1.9
  sudo cp graphene-sgx.ko /lib/modules/$(uname -r)/kernel/drivers/intel/sgx/
  sudo ln -sf /lib/modules/$(uname -r)/kernel/drivers/intel/sgx/graphene-sgx.ko /lib/modules/$(uname -r)
  cat /etc/modules | grep -Fxq graphene-sgx || sudo sh -c 'echo graphene-sgx >> /etc/modules'
  sudo /sbin/depmod -a
  sudo /sbin/modprobe graphene-sgx
  popd
fi

# compile PAL
pushd Pal/src
sudo make -j5 SGX=1 DEBUG=1
popd

# compile LibOS
pushd LibOS
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 101 --slave /usr/bin/g++ g++ /usr/bin/g++-4.8
sudo make -j5 SGX=1 SGX_SIGNER_KEY=/opt/intel/sgxkey/enclave-key.pem DEBUG=1
sudo update-alternatives --remove gcc /usr/bin/gcc-4.8
sudo ln -sf /usr/bin/gcc-5 /usr/bin/gcc
sudo ln -sf /usr/bin/g++-5 /usr/bin/g++
popd

# finalize
popd

echo '[INFO] build complete.  read the docs'# finalize
